

[alias]

	#export the diff of current file and last commit as a path file
	diffpatch = "!f() { git diff HEAD^ HEAD > diff.patch;  }; f"
	#then
	#git apply diffg.patch

	#Track all remote git branches as local branches
	#useful befor running git recent
	trackremotebranches = "!f() { for i in $(git branch -a | grep remote | grep -v HEAD | grep -v master); do git branch --track ${i#remotes/origin/} $i; done;  }; f"

	#show my commits
	mine = "!f() { git log --all --author=`git config user.email` --oneline --decorate; }; f" 

	# view recently updated branches
	rb=  for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)'
	rb2 = for-each-ref --sort=-committerdate refs/heads/

	#revert to origin
	rv="!f() { git fetch origin && git reset --hard origin/master; }; f"

	# list all unmerged changes in git
	nmm = branch --no-merged master
	nmd = branch --no-merged llf/dynamodb

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = pull --recurse-submodules

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"



	co = checkout
	cob = checkout -b
	coo = !git fetch && git checkout
	br = branch
	brd = branch -d
	brD = branch -D
	merged = branch --merged
	st = status
	aa = add -A .
	cm = commit -m
	aacm = !git add -A . && git commit -m
	cp = cherry-pick
	amend = commit --amend -m
	dev = !git checkout dev && git pull origin dev
	staging = !git checkout staging && git pull origin staging
	master = !git checkout master && git pull origin 
	po = push origin
	pod = push origin dev
	pos = push origin staging
	pom = push origin master
	poh = push origin HEAD
	pogm = !git push origin gh-pages && git checkout master && git pull origin master && git rebase gh-pages && git push origin master && git checkout gh-pages
	pomg = !git push origin master && git checkout gh-pages && git pull origin gh-pages && git rebase master && git push origin gh-pages && git checkout master
	plo = pull origin
	plod = pull origin dev
	plos = pull origin staging
	plom = pull origin master
	ploh = pull origin HEAD
	unstage = reset --soft HEAD^
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	f = "!git ls-files | grep -i"
	gr = grep -Ii
	la = "!git config -l | grep alias | cut -c 7-"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = "/Users/$HOME/.gitignore"
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
	editor = code --wait

  #pager = delta --plus-color="#012800" --minus-color="#340001"

[interactive]
  diffFilter = delta --color-only



[delta]
    features = decorations
    whitespace-error-style = 22 reverse
	side-by-side = true

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none

    
[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = false

[diff]

	# Detect copies as well as renames
	renames = copies
	tool = vscode

[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = vscode

[push]

	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

# URL shorthands

# Enforce SSH
[url "ssh://git@github.com/"]
  insteadOf = https://github.com/
[url "ssh://git@gitlab.com/"]
  insteadOf = https://gitlab.com/
[url "ssh://git@bitbucket.org/"]
  insteadOf = https://bitbucket.org/


# [url "git@github.com:"]

# 	insteadOf = "gh:"
# 	pushInsteadOf = "github:"
# 	pushInsteadOf = "git://github.com/"

# [url "git://github.com/"]

# 	insteadOf = "github:"

# [url "git@gist.github.com:"]

# 	insteadOf = "gst:"
# 	pushInsteadOf = "gist:"
# 	pushInsteadOf = "git://gist.github.com/"

# [url "git://gist.github.com/"]

# 	insteadOf = "gist:"
	
[gpg]
	program = gpg
[mergetool "vscode"]
	cmd = "code --wait "
[difftool "vscode"]
	cmd = "code --wait --diff  "
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[credential]
	# useHttpPath = true
	# helper = cache --timeout=3600
# [user]
# 	signingkey = CBE88F0F5234CF27BEF6FB71DC14DD3675E4A1BC
# 	name = 
# 	email = 
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[user]
	email = 
	name = 
